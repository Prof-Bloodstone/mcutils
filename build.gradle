plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'com.diffplug.gradle.spotless' version '3.29.0'
    id 'maven-publish'
    id 'signing'
}

def artifactId = 'mcutils'
group "dev.bloodstone"
version '0.0.1-SNAPSHOT'
def mcVersion = '1.15.2-R0.1-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/public/" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    compileOnly group: 'org.spigotmc', name: 'spigot-api', version: mcVersion
    testCompile group: 'junit', name: 'junit', version: '4.12'
}


spotless {
  format 'misc', {
    target '**/*.gradle', '**/*.md'
    trimTrailingWhitespace()
    indentWithSpaces(4)
  }
  kotlin {
    ktlint('0.36.0')
    licenseHeader '/* Licensed under MIT */'
  }
}

compileKotlin {
  kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
  options.compilerArgs += ['-Xlint:all', '-Xlint:-path', '-parameters']
  options.deprecation = true
  options.encoding = 'UTF-8'
}

test {
  useJUnitPlatform()
}

task javadocJar(type: Jar) {
  classifier 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

signing {
  required { !project.version.endsWith('-SNAPSHOT') && gradle.taskGraph.hasTask(':uploadArchives') && project.hasProperty('signing.keyId') }
  sign configurations.archives
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = 'mcutils'
      from components.java
      artifact javadocJar
      artifact sourcesJar
      pom {
        description = 'A library of utilities useful during Minecraft plugin development.'
        name = "MCUtils"
        url = 'https://github.com/Prof-Bloodstone/mcutils'

        developers {
          developer {
            id = 'prof_bloodstone'
            name = 'Prof_Bloodstone'
          }
        }

        issueManagement {
          system = 'GitHub Issues'
          url = 'https://github.com/Prof-Bloodstone/mcutils/issues'
        }

        licenses {
          license {
            name = 'MIT License'
            url = 'https://opensource.org/licenses/MIT'
          }
        }

        scm {
          connection = 'scm:git@github.com:Prof-Bloodstone/mcutils.git'
          developerConnection = 'scm:git@github.com:Prof-Bloodstone/mcutils.git'
          url = 'https://github.com/Prof-Bloodstone/mcutils'
        }
      }
    }
  }
  repositories {
    if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
      mavenSonatype {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
          authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
          authentication(userName: sonatypeUsername, password: sonatypePassword)
        }
      }
    }
  }
}
