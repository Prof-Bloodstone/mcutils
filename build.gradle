plugins {
  id 'java'
  id 'java-library'
  id 'org.jetbrains.kotlin.jvm' version '1.3.72'
  id 'org.jetbrains.dokka' version '0.10.1'
  id 'com.diffplug.gradle.spotless' version '3.29.0'
  id 'maven-publish'
  id 'signing'
}

def artifactId = 'mcutils'
group "dev.bloodstone"
version '0.0.3'
def mcVersion = '1.16.4-R0.1-SNAPSHOT'

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
  mavenCentral()
  maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
  maven { url "https://oss.sonatype.org/content/repositories/public/" }
  maven { url 'https://dl.bintray.com/kotlin/dokka' }
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib"
  compileOnlyApi group: 'org.spigotmc', name: 'spigot-api', version: mcVersion
  testCompile group: 'junit', name: 'junit', version: '4.12'
}

spotless {
  format 'misc', {
    target '**/*.gradle', '**/*.md'
    trimTrailingWhitespace()
    indentWithSpaces(4)
  }
  kotlin {
    ktlint('0.36.0')
    licenseHeader '/* Licensed under MIT */'
  }
}

compileKotlin {
  kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
  kotlinOptions.jvmTarget = "1.8"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
  options.compilerArgs += ['-Xlint:all', '-Xlint:-path', '-parameters']
  options.deprecation = true
  options.encoding = 'UTF-8'
}

test {
  useJUnitPlatform()
}

def dokkaConfig = {
  configuration {
    externalDocumentationLink {
      // Dokka gets 403 - probably CloudFlare drops due to UserAgent not being set
      // ^^ Not true anymore. And spigot is missing package-list.
      url = new URL('https://papermc.io/javadocs/paper/1.16')
      packageListUrl = new URL("${url}/package-list")
      // url = new URL('https://hub.spigotmc.org/javadocs/spigot/')
    }
  }
}

dokka {
  outputFormat = 'html'
  outputDirectory = "$buildDir/dokka"
  with dokkaConfig
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
  outputFormat = 'javadoc'
  outputDirectory = javadoc.destinationDir
  //inputs.dir 'src/main/kotlin'
  with dokkaConfig
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
  classifier 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
  classifier 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = 'mcutils'
      from components.java
      artifact javadocJar
      artifact sourcesJar
      pom {
        description = 'A library of utilities useful during Minecraft plugin development.'
        name = "MCUtils"
        url = 'https://github.com/Prof-Bloodstone/mcutils'

        developers {
          developer {
            id = 'prof_bloodstone'
            name = 'Prof_Bloodstone'
          }
        }

        issueManagement {
          system = 'GitHub Issues'
          url = 'https://github.com/Prof-Bloodstone/mcutils/issues'
        }

        licenses {
          license {
            name = 'MIT License'
            url = 'https://opensource.org/licenses/MIT'
          }
        }

        scm {
          connection = 'scm:git@github.com:Prof-Bloodstone/mcutils.git'
          developerConnection = 'scm:git@github.com:Prof-Bloodstone/mcutils.git'
          url = 'https://github.com/Prof-Bloodstone/mcutils'
        }
      }
    }
  }
  repositories {
    if(project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
      maven {
        name = "ossrh"
        def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        credentials {
          username = ossrhUsername
          password = ossrhPassword
        }
      }
    }
  }
}

signing {
  required { isReleaseVersion && gradle.taskGraph.hasTask("publishMavenJavaPublicationToOssrhRepository") }
  sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
  onlyIf { !project.version.endsWith('-SNAPSHOT') }
}

